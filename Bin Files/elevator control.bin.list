EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
main(1).bin -- emu8086 assembler version: 4.08  
 
[ 19-04-2021  --  12:29:11 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       #make_bin#
[   2]        :                                       
[   3]        :                                       #LOAD_SEGMENT=FFFFh#
[   4]        :                                       #LOAD_OFFSET=0000h#
[   5]        :                                       
[   6]        :                                       #CS=0000h#
[   7]        :                                       #IP=0000h#
[   8]        :                                       
[   9]        :                                       #DS=0000h#
[  10]        :                                       #ES=0000h#
[  11]        :                                       
[  12]        :                                       #SS=0000h#
[  13]        :                                       #SP=FFFEh#
[  14]        :                                       
[  15]        :                                       #AX=0000h#
[  16]        :                                       #BX=0000h#
[  17]        :                                       #CX=0000h#
[  18]        :                                       #DX=0000h#
[  19]        :                                       #SI=0000h#
[  20]        :                                       #DI=0000h#
[  21]        :                                       #BP=0000h#
[  22]        :                                       
[  23]        :                                       	
[  24]    0000: E9 09 04                              jmp st1
[  25]    0003: 90                                    nop
[  26]        :                                       ;int 1 is not used so 1 x4 = 00004h - it is stored with 0
[  27]    0004: 00 00                                 dw      0000
[  28]    0006: 00 00                                 dw      0000
[  29]        :                                       ;eoc - is used as nmi - ip value points to ad_isr and cs value will
[  30]        :                                       ;remain at 0000
[  31]    0008: 22 04                                 dw      nmi_isr
[  32]    000A: 00 00                                 dw      0000
[  33]    000C: 77 7B 7D 7E BB BD BE D7 DB DD DE E7   TABLE_I	DB 77H, 7BH, 7DH, 7EH, 0BBH, 0BDH, 0BEH, 0D7H, 0DBH, 0DDH, 0DEH, 0E7H, 0EBH,  0EDH	;keypad input and sensors
                EB ED                               
[  34]        :                                       ;          CS1  Fine CS2  Gnd  1up  1in  1dwn 2up  2in  2dwn 3in 3dwn  clse gnd-in
[  35]        :                                       
[  36]        :                                       cnt0 equ 00h ; temp
[  37]        :                                       cnt1 equ 02h ; temp
[  38]        :                                       cnt2 equ 04h ; temp
[  39]        :                                       c_reg1 equ 06h ; temp
[  40]        :                                       
[  41]        :                                       pa1 equ 08h ; temp
[  42]        :                                       pb1 equ 0Ah ; temp
[  43]        :                                       pc1 equ 0Ch ; temp
[  44]        :                                       c_reg2 equ 0Eh ; temp
[  45]        :                                       
[  46]        :                                       
[  47]        :                                       
[  48]    001A: 00                                    floor db 0
[  49]    001B: 00                                    fine db 0
[  50]    001C: 00                                    cu_floor db 0
[  51]    001D: 00                                    cl_floor db 0
[  52]    001E: 00                                    door_close db 0
[  53]    001F: 00                                    dir_bit db 0
[  54]    0020: 00                                    slow db 0
[  55]    0021: 00                                    fl_btn db 0
[  56]    0022: 00                                    lt_btn db 0
[  57]        :                                       ;press db 0
[  58]        :                                       ;press_out db 0
[  59]        :                                       
[  60]    0023: 00                                    lt_mov db 0 ; is lift moving? 1 = yes
[  61]    0024: 00 00 00 00 00 00 00 00 00 00 00 00   db 1000 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  62]        :                                       
[  63]        :                                       
[  64]    040C:                                       st1:
[  65]        :                                       ;initialising 8255
[  66]        :                                       
[  67]        :                                       ;setting counter 1 to mode 1
[  68]    040C: B0 82                                 mov al, 10000010b
[  69]    040E: E6 0E                                 out c_reg2, al
[  70]        :                                       ;initialising 8253
[  71]        :                                       ;Setting counter 0 to mode 2 and giving count of 9
[  72]    0410: B0 14                                 mov       al,00010100b
[  73]    0412: E6 06                                 out       06h,al
[  74]    0414: B0 09                                 mov       al,09h
[  75]    0416: E6 00                                 out       00h,al
[  76]        :                                       
[  77]    0418: B0 52                                 mov       al,01010010b ; setting counter 1 to mode 1
[  78]    041A: E6 06                                 out       06h,al
[  79]    041C: B0 00                                 mov       al, 0
[  80]    041E: E6 02                                 out       02h, al ; giving count of 0 to ensure lift does not move (0% pwm)
[  81]        :                                       
[  82]    0420: EB FE                                 wait_nmi: jmp wait_nmi ;waiting for a button to be pressed
[  83]        :                                       
[  84]        :                                       
[  85]        :                                       
[  86]        :                                       ;taking inputs
[  87]        :                                       
[  88]        :                                       ;taking inputs using keyboard matrix
[  89]    0422:                                       nmi_isr:
[  90]        :                                       
[  91]    0422: 53                                    PUSH BX
[  92]    0423: 51                                    PUSH CX
[  93]    0424: 52                                    PUSH DX
[  94]        :                                       
[  95]        :                                       ;send 0's to all rows
[  96]    0425: B0 00                                 mov al,00h
[  97]    0427: BA 08 00                              mov dx, pa1
[  98]    042A: EE                                    out dx,al
[  99]        :                                       
[ 100]        :                                       ;read columns
[ 101]    042B: BA 0A 00                              mov dx,pb1   ; load input port address
[ 102]        :                                       
[ 103]    042E:                                       wait_open :
[ 104]    042E: EC                                    in al,dx
[ 105]    042F: 24 0F                                 and al,0fh
[ 106]    0431: 3C 0F                                 cmp al,0fh
[ 107]    0433: 90 90                                 jne wait_open
[ 108]        :                                       
[ 109]        :                                       ;read colunms to see if key is pressed
[ 110]    0435:                                       wait_press :
[ 111]    0435: EC                                    in al,dx
[ 112]    0436: 24 0F                                 and al,0fh
[ 113]    0438: 3C 0F                                 cmp al,0fh
[ 114]    043A: 90 90                                 je wait_press
[ 115]        :                                       
[ 116]    043C: E8 58 02                              call delay_20ms
[ 117]        :                                       
[ 118]        :                                       ;read columns to see if key still pressed
[ 119]    043F: EC                                    in al,dx
[ 120]    0440: 24 0F                                 and al,0fh
[ 121]    0442: 3C 0F                                 cmp al,0fh
[ 122]    0444: 90 90                                 je wait_press
[ 123]        :                                       
[ 124]    0446: E8 4E 02                              call delay_20ms
[ 125]        :                                       
[ 126]        :                                       ;find key
[ 127]    0449: B0 FE                                 mov al,0feh
[ 128]    044B: 8A C8                                 mov cl,al
[ 129]        :                                       
[ 130]        :                                       
[ 131]        :                                       
[ 132]    044D:                                       next_row:
[ 133]    044D: BA 0A 00                              mov dx, pb1
[ 134]    0450: EC                                    in al, dx
[ 135]    0451: 24 0F                                 and al,0fh
[ 136]    0453: 3C 0F                                 cmp al,0fh
[ 137]    0455: 75 06                                 jne encode
[ 138]    0457: D0 C1                                 rol cl,01
[ 139]    0459: 8A C1                                 mov al,cl
[ 140]    045B: EB F0                                 jmp next_row
[ 141]        :                                       
[ 142]        :                                       
[ 143]    045D:                                       encode:
[ 144]    045D: BB 0F 00                              mov bx,000fh
[ 145]    0460: EC                                    in al,dx
[ 146]        :                                       
[ 147]    0461:                                       try_next :
[ 148]    0461: 3A 47 0C                              cmp al,table_I[bx]
[ 149]    0464: 74 07                                 je done
[ 150]    0466: 4B                                    dec bx
[ 151]    0467: 90 90                                 jns try_next
[ 152]    0469: B4 01                                 mov ah,01h
[ 153]    046B: EB 04                                 jmp exit
[ 154]        :                                       
[ 155]        :                                       
[ 156]    046D:                                       done:
[ 157]    046D: 8A C3                                 mov al,bl
[ 158]    046F: B4 00                                 mov ah,00h
[ 159]        :                                       
[ 160]        :                                       
[ 161]        :                                       
[ 162]    0471:                                       exit:
[ 163]    0471: E8 05 00                              call key_press
[ 164]    0474: 5A                                    POP DX
[ 165]    0475: 59                                    POP CX
[ 166]    0476: 5B                                    POP BX
[ 167]    0477: 9D                                    POPF
[ 168]    0478: CF                                    iret ;;; changed ret to iret
[ 169]        :                                       
[ 170]        :                                       
[ 171]        :                                       ;sub-routine to set the button pressed by the user
[ 172]    0479:                                       PROC key_press
[ 173]    0479: 9C                                    PUSHF
[ 174]    047A: 53                                    PUSH BX
[ 175]    047B: 51                                    PUSH CX
[ 176]    047C: 52                                    PUSH DX
[ 177]        :                                       
[ 178]        :                                       
[ 179]    047D:                                       y1:
[ 180]    047D: 3C 77                                 cmp al, 77h
[ 181]    047F: 75 06                                 jnz y2
[ 182]        :                                       ;mov al, 0ah
[ 183]        :                                       ;mov al,1
[ 184]        :                                       ;mov cs1,al
[ 185]        :                                       ;calling lower coarse sensor subroutine
[ 186]    0481: E8 5F 01                              call coarse_lower
[ 187]    0484: E9 BA 00                              jmp y0
[ 188]        :                                       
[ 189]    0487:                                       y2:
[ 190]    0487: 3C 7B                                 cmp al, 7Bh
[ 191]    0489: 75 09                                 jnz y3
[ 192]        :                                       ;mov al, 00h
[ 193]        :                                       ;mov al,1
[ 194]    048B: A2 1B 00                              mov fine,al
[ 195]        :                                       ;calling fine sensor subroutine
[ 196]    048E: E8 8E 01                              call fine_sensor
[ 197]    0491: E9 AD 00                              jmp y0
[ 198]        :                                       
[ 199]    0494:                                       y3:
[ 200]    0494: 3C 7D                                 cmp al, 7Dh
[ 201]    0496: 75 06                                 jnz y4
[ 202]        :                                       ;mov al,0bh
[ 203]        :                                       ;mov al,1
[ 204]        :                                       ;mov cs2,al
[ 205]        :                                       ;calling upper coarse sensor subroutine
[ 206]    0498: E8 66 01                              call coarse_upper
[ 207]    049B: E9 A3 00                              jmp y0
[ 208]        :                                       
[ 209]    049E:                                       y4:
[ 210]    049E: 3C 7E                                 cmp al, 7Eh
[ 211]    04A0: 75 0C                                 jnz y5
[ 212]        :                                       ; mov al, 0ch
[ 213]        :                                       ; mov al,1
[ 214]        :                                       ;mov ground_up,al
[ 215]    04A2: B0 02                                 mov al, 00000010b
[ 216]    04A4: 0A 06 21 00                           or al, fl_btn ; setting corresponding bit if it is not already set
[ 217]    04A8: A2 21 00                              mov fl_btn, al ; moving variable back to memory
[ 218]    04AB: E9 93 00                              jmp y0
[ 219]        :                                       
[ 220]    04AE:                                       y5:
[ 221]    04AE: 3C ED                                 cmp al, 0EDh
[ 222]    04B0: 75 0C                                 jnz y6
[ 223]        :                                       ;mov al, 01h
[ 224]        :                                       ;mov al,1
[ 225]        :                                       ;mov ground_in,al
[ 226]    04B2: B0 01                                 mov al, 00000001b
[ 227]    04B4: 0A 06 22 00                           or al, lt_btn ; setting corresponding bit if it is not already set
[ 228]    04B8: A2 22 00                              mov lt_btn, al ; moving variable back to memory
[ 229]    04BB: E9 83 00                              jmp y0
[ 230]        :                                       
[ 231]    04BE:                                       y6:
[ 232]    04BE: 3C BB                                 cmp al, 0BBh
[ 233]    04C0: 75 0B                                 jnz y7
[ 234]        :                                       ;mov al, 02h
[ 235]        :                                       ;mov al,1
[ 236]        :                                       ;mov first_up,al
[ 237]    04C2: B0 08                                 mov al, 00001000b
[ 238]    04C4: 0A 06 21 00                           or al, fl_btn ; setting corresponding bit if it is not already set
[ 239]    04C8: A2 21 00                              mov fl_btn, al ; moving variable back to memory
[ 240]    04CB: EB 74                                 jmp y0
[ 241]        :                                       
[ 242]    04CD:                                       y7:
[ 243]    04CD: 3C BD                                 cmp al, 0BDh
[ 244]    04CF: 75 0B                                 jnz y8
[ 245]        :                                       ;mov al, 03h
[ 246]        :                                       ;mov al,1
[ 247]        :                                       ;mov first_in,al
[ 248]    04D1: B0 02                                 mov al, 00000010b
[ 249]    04D3: 0A 06 22 00                           or al, lt_btn ; setting corresponding bit if it is not already set
[ 250]    04D7: A2 22 00                              mov lt_btn, al ; moving variable back to memory
[ 251]    04DA: EB 65                                 jmp y0
[ 252]        :                                       
[ 253]    04DC:                                       y8:
[ 254]    04DC: 3C BE                                 cmp al, 0BEh
[ 255]    04DE: 75 0B                                 jnz y9
[ 256]        :                                       ;mov al, 0dh
[ 257]        :                                       ;mov al,01h
[ 258]        :                                       ;mov first_down,al
[ 259]    04E0: B0 04                                 mov al, 00000100b
[ 260]    04E2: 0A 06 21 00                           or al, fl_btn ; setting corresponding bit if it is not already set
[ 261]    04E6: A2 21 00                              mov fl_btn, al ; moving variable back to memory
[ 262]    04E9: EB 56                                 jmp y0
[ 263]        :                                       
[ 264]    04EB:                                       y9:
[ 265]    04EB: 3C D7                                 cmp al, 0D7h
[ 266]    04ED: 75 0B                                 jnz yA
[ 267]        :                                       ;mov al, 04h
[ 268]        :                                       ;mov al,01h
[ 269]        :                                       ;mov second_up,al
[ 270]    04EF: B0 20                                 mov al, 00100000b
[ 271]    04F1: 0A 06 21 00                           or al, fl_btn ; setting corresponding bit if it is not already set
[ 272]    04F5: A2 21 00                              mov fl_btn, al ; moving variable back to memory
[ 273]    04F8: EB 47                                 jmp y0
[ 274]        :                                       
[ 275]    04FA:                                       yA:
[ 276]    04FA: 3C DB                                 cmp al, 0DBh
[ 277]    04FC: 75 0B                                 jnz yB
[ 278]        :                                       ;mov al, 05h
[ 279]        :                                       ;mov al,01h
[ 280]        :                                       ;mov second_in,al
[ 281]    04FE: B0 02                                 mov al, 00000010b
[ 282]    0500: 0A 06 22 00                           or al, lt_btn ; setting corresponding bit if it is not already set
[ 283]    0504: A2 22 00                              mov lt_btn, al ; moving variable back to memory
[ 284]    0507: EB 38                                 jmp y0
[ 285]        :                                       
[ 286]    0509:                                       yB:
[ 287]    0509: 3C DD                                 cmp al, 0DDh
[ 288]    050B: 75 0B                                 jnz yC
[ 289]        :                                       ;mov al,1
[ 290]        :                                       ;mov second_down,al
[ 291]    050D: B0 10                                 mov al, 00010000b
[ 292]    050F: 0A 06 21 00                           or al, fl_btn ; setting corresponding bit if it is not already set
[ 293]    0513: A2 21 00                              mov fl_btn, al ; moving variable back to memory
[ 294]    0516: EB 29                                 jmp y0
[ 295]        :                                       
[ 296]    0518:                                       yC:
[ 297]    0518: 3C DE                                 cmp al, 0DEh
[ 298]    051A: 75 0B                                 jnz yD
[ 299]        :                                       ;mov al, 0eh
[ 300]        :                                       ;mov al,1
[ 301]        :                                       ;mov third_in,al
[ 302]    051C: B0 02                                 mov al, 00000010b
[ 303]    051E: 0A 06 22 00                           or al, lt_btn ; setting corresponding bit if it is not already set
[ 304]    0522: A2 22 00                              mov lt_btn, al ; moving variable back to memory
[ 305]    0525: EB 1A                                 jmp y0
[ 306]        :                                       
[ 307]    0527:                                       yD:
[ 308]    0527: 3C E7                                 cmp al, 0E7h
[ 309]    0529: 75 0B                                 jnz yE
[ 310]        :                                       ;mov al, 07h
[ 311]        :                                       ;mov al,01h
[ 312]        :                                       ;mov third_down,al
[ 313]    052B: B0 02                                 mov al, 00000010b
[ 314]    052D: 0A 06 22 00                           or al, lt_btn ; setting corresponding bit if it is not already set
[ 315]    0531: A2 22 00                              mov lt_btn, al ; moving variable back to memory
[ 316]    0534: EB 0B                                 jmp y0
[ 317]        :                                       
[ 318]    0536:                                       yE:
[ 319]    0536: 3C EB                                 cmp al, 0EBh
[ 320]    0538: 75 07                                 jnz y0
[ 321]        :                                       ;mov al,08h
[ 322]    053A: B0 01                                 mov al,01h
[ 323]    053C: A2 1E 00                              mov door_close, al
[ 324]        :                                       ;set
[ 325]    053F: EB 00                                 jmp y0
[ 326]        :                                       
[ 327]        :                                       
[ 328]        :                                       
[ 329]    0541:                                       y0:
[ 330]    0541: 90                                    nop ; put program here to check if we need to start or not
[ 331]        :                                       
[ 332]    0542: 5A                                    POP DX
[ 333]    0543: 59                                    POP CX
[ 334]    0544: 5B                                    POP BX
[ 335]    0545: 9D                                    POPF
[ 336]    0546: C3                                    ret
[ 337]        :                                       ENDP key_press
[ 338]        :                                       
[ 339]        :                                       
[ 340]    0547:                                       PROC stpchk
[ 341]        :                                       ;push all registers
[ 342]        :                                       
[ 343]    0547: 53                                    push bx
[ 344]    0548: 51                                    push cx
[ 345]    0549: 52                                    push dx
[ 346]        :                                       
[ 347]    054A: 8B D0                                 mov dx, ax
[ 348]    054C: 8A CA                                 mov cl, dl
[ 349]    054E: B0 01                                 mov al, 00000001b
[ 350]    0550: D2 C0                                 rol al, cl ; bit is at respective floor
[ 351]    0552: 8A D8                                 mov bl ,al
[ 352]    0554: 22 1E 22 00                           and bl, lt_btn
[ 353]    0558: 75 0C                                 jnz stop_ ; if button inside lift is not pressed, we check for button outside
[ 354]    055A: 8A CA                                 mov cl, dl
[ 355]    055C: 02 CE                                 add cl, dh
[ 356]    055E: D2 C0                                 rol al, cl ; bit is at respective floor*2 + direction_bit
[ 357]    0560: 22 06 21 00                           and al, fl_btn
[ 358]    0564: 74 03                                 jz nostp
[ 359]        :                                       
[ 360]    0566: E8 04 00                              stop_:    call stope
[ 361]    0569:                                       nostp:
[ 362]        :                                       
[ 363]    0569: 5A                                    Pop dx
[ 364]    056A: 59                                    Pop cx
[ 365]    056B: 5B                                    Pop bx    ;returing original values to the register
[ 366]    056C: C3                                    ret
[ 367]        :                                       stpchk endp
[ 368]        :                                       
[ 369]    056D:                                       stope proc near
[ 370]    056D: B0 06                                 mov al, 6  ;setting pwm to 40%
[ 371]    056F: E6 0A                                 out 0Ah, al
[ 372]    0571: E8 11 00                              call delay1
[ 373]        :                                       
[ 374]    0574: B0 07                                 mov al, 7   ;setting pwm to 30%
[ 375]    0576: E6 0A                                 out 0Ah, al
[ 376]    0578: E8 0A 00                              call delay1
[ 377]        :                                       
[ 378]    057B: B0 08                                 mov al, 8   ;setting pwm to 20%
[ 379]    057D: E6 0A                                 out 0Ah, al
[ 380]        :                                       
[ 381]    057F: B0 01                                 mov al, 1
[ 382]    0581: A2 20 00                              mov slow, al ; set flag that lift is slow
[ 383]        :                                       
[ 384]    0584: C3                                    ret
[ 385]        :                                       stope endp
[ 386]        :                                       
[ 387]        :                                       ;delay subroutine
[ 388]    0585:                                       delay1 proc near
[ 389]    0585: 51                                    push cx
[ 390]    0586: B9 E8 FD                              mov cx, 65000
[ 391]    0589: 90                                    del1: nop
[ 392]    058A: 90                                    nop
[ 393]    058B: 90                                    nop
[ 394]    058C: 90                                    nop
[ 395]    058D: 90                                    nop
[ 396]    058E: 90                                    nop
[ 397]    058F: 90                                    nop
[ 398]    0590: 90                                    nop
[ 399]    0591: E2 F6                                 loop del1
[ 400]        :                                       
[ 401]    0593: 59                                    pop cx
[ 402]    0594: C3                                    ret
[ 403]        :                                       ENDP delay1
[ 404]        :                                       
[ 405]        :                                       ;start lift subroutine
[ 406]    0595:                                       PROC start1  ;subroutine to start the lift moving
[ 407]    0595: B0 08                                 mov al, 8       ;setting pwm to 20%
[ 408]    0597: E6 02                                 out cnt1, al
[ 409]    0599: E8 E9 FF                              call delay1
[ 410]        :                                       
[ 411]    059C: B0 07                                 mov al, 7       ;setting pwm to 30%
[ 412]    059E: E6 02                                 out cnt1, al
[ 413]    05A0: E8 E2 FF                              call delay1
[ 414]        :                                       
[ 415]    05A3: B0 06                                 mov al, 6   ;setting pwm to 40%
[ 416]    05A5: E6 02                                 out cnt1, al
[ 417]    05A7: E8 DB FF                              call delay1
[ 418]        :                                       
[ 419]    05AA: B0 05                                 mov al, 5   ;setting pwm to 50%
[ 420]    05AC: E6 02                                 out cnt1, al
[ 421]        :                                       
[ 422]    05AE: B0 00                                 mov al, 0
[ 423]    05B0: A2 20 00                              mov slow, al ; set flag that lift is not slow
[ 424]        :                                       
[ 425]    05B3: C3                                    ret
[ 426]        :                                       ENDP    start1
[ 427]        :                                       
[ 428]    05B4:                                       PROC   setdir      ;ah is passed as parameter with the floor we want to go
[ 429]    05B4: A0 1A 00                              mov al, floor ; mov the current floor into al
[ 430]    05B7: 3A E0                                 cmp ah, al
[ 431]    05B9: 7F 07                                 jg dir0
[ 432]    05BB: B0 01                                 mov al, 1
[ 433]    05BD: A2 1F 00                              mov dir_bit, al ; store dir_bit as up(1)
[ 434]    05C0: EB 05                                 jmp dir1
[ 435]    05C2: B0 00                                 dir0: mov al, 0
[ 436]    05C4: A2 1F 00                              mov dir_bit, al ; store dir_bit as down (0)
[ 437]    05C7: C3                                    dir1: ret
[ 438]        :                                       ENDP    setdir
[ 439]        :                                       
[ 440]        :                                       ;subroutine to check if lift is moving when a button is pressed, and if not, to start moving it
[ 441]    05C8:                                       PROC check_start ;ah has the floor of the button pressed
[ 442]    05C8: 53                                    push BX
[ 443]    05C9: 51                                    push cx
[ 444]    05CA: 8B D8                                 mov bx, ax
[ 445]    05CC: A0 23 00                              mov al, lt_mov
[ 446]    05CF: 3C 01                                 cmp al, 1
[ 447]    05D1: 74 0D                                 jz no_start
[ 448]    05D3: 8A E7                                 mov ah, bh
[ 449]    05D5: E8 DC FF                              call setdir
[ 450]        :                                       ;out direction bit to lift motor
[ 451]    05D8: E8 BA FF                              call start1
[ 452]    05DB: B0 01                                 mov al, 1
[ 453]    05DD: A2 23 00                              mov lt_mov, al
[ 454]    05E0:                                       no_start:
[ 455]    05E0: 59                                    pop cx
[ 456]    05E1: 5B                                    pop bx
[ 457]    05E2: C3                                    ret
[ 458]        :                                       ENDP check_start
[ 459]        :                                       
[ 460]        :                                       ;subroutine for lower coarse sensor
[ 461]    05E3:                                       PROC coarse_lower
[ 462]    05E3: A0 1D 00                              mov al, cl_floor
[ 463]    05E6: 8A 1E 1F 00                           mov bl, dir_bit
[ 464]    05EA: 80 FB 01                              cmp bl, 1
[ 465]    05ED: 75 40                                 jnz dec_fs
[ 466]    05EF: FE C0                                 inc al
[ 467]    05F1: EB 3D                                 jmp fs
[ 468]    05F3: FE C8                                 dec_cl: dec al
[ 469]    05F5: A2 1D 00                              cl:    mov cl_floor, al
[ 470]    05F8: 80 FB 01                              cmp bl, 1
[ 471]    05FB: 75 03                                 jnz bot_cl
[ 472]    05FD: E8 47 FF                              call stpchk ; checks if it needs to stop at respective floor(given using al), and if so , it sets pwm to 20% along with setting the slow flag
[ 473]    0600: C3                                    bot_cl:    ret
[ 474]        :                                       ENDP coarse_lower
[ 475]        :                                       
[ 476]        :                                       ;subroutine for upper coarse sensor
[ 477]    0601:                                       PROC coarse_upper
[ 478]    0601: A0 1C 00                              mov al, cu_floor
[ 479]    0604: 8A 1E 1F 00                           mov bl, dir_bit
[ 480]    0608: 80 FB 01                              cmp bl, 1
[ 481]    060B: 75 22                                 jnz dec_fs
[ 482]    060D: FE C0                                 inc al
[ 483]    060F: EB 1F                                 jmp fs
[ 484]    0611: FE C8                                 dec_cu: dec al
[ 485]    0613: A2 1C 00                              cu:    mov cu_floor, al
[ 486]    0616: 80 FB 00                              cmp bl, 0
[ 487]    0619: 75 03                                 jnz bot_cu
[ 488]    061B: E8 29 FF                              call stpchk ; checks if it needs to stop at respective floor(given using al), and if so , it sets pwm to 20% along with setting the slow flag
[ 489]    061E: C3                                    bot_cu:    ret
[ 490]        :                                       ENDP coarse_lower
[ 491]        :                                       
[ 492]        :                                       
[ 493]        :                                       
[ 494]        :                                       ;subroutine for fine sensor
[ 495]    061F:                                       PROC fine_sensor
[ 496]    061F: 53                                    push bx
[ 497]    0620: A0 1A 00                              mov al, floor
[ 498]    0623: 8A 1E 1F 00                           mov bl, dir_bit
[ 499]    0627: 80 FB 01                              cmp bl, 1
[ 500]    062A: 75 03                                 jnz dec_fs
[ 501]    062C: 40                                    inc ax
[ 502]    062D: EB 01                                 jmp fs
[ 503]    062F: 48                                    dec_fs: dec ax
[ 504]    0630: A2 1A 00                              fs:    mov floor, al   ;incrementing the floor we are on
[ 505]    0633: E6 0A                                 out pb1, al ; giving the floor number to the 7 segment displays
[ 506]    0635: A0 20 00                              mov al, slow
[ 507]    0638: 3C 01                                 cmp al, 1
[ 508]    063A: 90 90                                 jnz end_fine
[ 509]    063C: B0 00                                 mov al, 0
[ 510]    063E: E6 02                                 out cnt1, al; setting pwm cycle to 0 //still needs to be tested if this can be done, otherwise we use 8255 BSR mode to give a 0 to the gate of the counter
[ 511]        :                                       ;out ;;BSR MODE for C6 I think (open door)
[ 512]    0640:                                       end_fine :
[ 513]    0640: E8 01 00                              call check_floor ; calling subroutine to check if any button has been pressed, and if so, to move lift there if no one enters lift and presses the button inside?
[ 514]    0643: C3                                    ret
[ 515]        :                                       ENDP    fine_sensor
[ 516]        :                                       
[ 517]        :                                       
[ 518]        :                                       
[ 519]        :                                       
[ 520]        :                                       ;subroutine to find if a button is pressed once the lift has stopped, and if it is, to call the start moving lift function with the floor it was pressed for
[ 521]    0644:                                       PROC check_floor
[ 522]    0644: 53                                    push BX
[ 523]    0645: 51                                    push cx
[ 524]    0646: 8A 1E 22 00                           mov bl, lt_btn
[ 525]    064A: 8A 3E 21 00                           mov bh, fl_btn
[ 526]        :                                       
[ 527]    064E:                                       chkf0:      ;checking if a floor 0 button is pressed
[ 528]    064E: B0 01                                 mov al, 00000001b
[ 529]    0650: B4 03                                 mov ah, 00000011b
[ 530]    0652: 23 C3                                 and ax, bx
[ 531]    0654: 3D 00 00                              cmp ax, 0
[ 532]    0657: 74 07                                 jz chkf1
[ 533]    0659: B4 00                                 mov ah, 0
[ 534]    065B: E8 6A FF                              call check_start
[ 535]    065E: EB 36                                 jmp bot_check_floor
[ 536]        :                                       
[ 537]    0660:                                       chkf1:  ;checking if a floor 1 button is pressed
[ 538]    0660: B0 02                                 mov al, 00000010b
[ 539]    0662: B4 0C                                 mov ah, 00001100b
[ 540]    0664: 23 C3                                 and ax, bx
[ 541]    0666: 3D 00 00                              cmp ax, 0
[ 542]    0669: 74 F5                                 jz chkf1
[ 543]    066B: B4 01                                 mov ah, 1
[ 544]    066D: E8 58 FF                              call check_start
[ 545]    0670: EB 24                                 jmp bot_check_floor
[ 546]        :                                       
[ 547]    0672:                                       chkf2:  ;checking if a floor 2 button is pressed
[ 548]    0672: B0 04                                 mov al, 00000100b
[ 549]    0674: B4 30                                 mov ah, 00110000b
[ 550]    0676: 23 C3                                 and ax, bx
[ 551]    0678: 3D 00 00                              cmp ax, 0
[ 552]    067B: 74 E3                                 jz chkf1
[ 553]    067D: B4 02                                 mov ah, 2
[ 554]    067F: E8 46 FF                              call check_start
[ 555]    0682: EB 12                                 jmp bot_check_floor
[ 556]        :                                       
[ 557]    0684:                                       chkf3:  ;checking if a floor 3 button is pressed
[ 558]    0684: B0 08                                 mov al, 00001000b
[ 559]    0686: B4 C0                                 mov ah, 11000000b
[ 560]    0688: 23 C3                                 and ax, bx
[ 561]    068A: 3D 00 00                              cmp ax, 0
[ 562]    068D: 74 D1                                 jz chkf1
[ 563]    068F: B4 03                                 mov ah, 3
[ 564]    0691: E8 34 FF                              call check_start
[ 565]    0694: EB 00                                 jmp bot_check_floor
[ 566]        :                                       
[ 567]    0696:                                       bot_check_floor:
[ 568]    0696: C3                                    ret
[ 569]        :                                       ENDP    check_floor
[ 570]        :                                       
[ 571]    0697:                                       PROC delay_20ms
[ 572]    0697: 51                                    push cx
[ 573]    0698: B9 88 13                              mov cx, 5000
[ 574]    069B: 90                                    del20: nop
[ 575]    069C: 90                                    nop
[ 576]    069D: 90                                    nop
[ 577]    069E: 90                                    nop
[ 578]    069F: 90                                    nop
[ 579]    06A0: E2 F9                                 loop del20
[ 580]    06A2: 51                                    push cx
[ 581]    06A3: C3                                    ret
[ 582]        :                                       ENDP delay_20ms
[ 583]        :                                       
 
===================================================================================================
 




===================================================================================================
